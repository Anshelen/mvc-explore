<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
	   http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <!-- Static Resources Configuration (get access to static sources such as CSS and JavaScript files) -->
    <mvc:resources mapping="/resources/**" location="/resources/"/>


    <!--find property file. See bean id='dataSource' for example ${jdbc.hsqldb.driverClass}-->
    <context:property-placeholder location="classpath:util.properties" />

    <!-- XML Bean Definitions -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.hsqldb.driverClass}" />
        <property name="url" value="${jdbc.hsqldb.url}" />
        <property name="username" value="${jdbc.hsqldb.username}" />
        <property name="password" value="${jdbc.hsqldb.password}" />
    </bean>

    <!-- initialize Embedded DataSource. Встроенная база данных-->
    <jdbc:initialize-database data-source="dataSource">
        <jdbc:script location="classpath:dbschema.sql"/>
        <jdbc:script location="classpath:test-data.sql"/>
    </jdbc:initialize-database>

    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="username" value="${java.mail.username}"/>
        <property name="password" value="${java.mail.password}"/>
        <property name="port" value="25"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.smtp.ssl.trust">${java.mail.host}</prop>
                <prop key="mail.smtp.host">${java.mail.host}</prop>
            </props>
        </property>
    </bean>

    <bean id="restTemplate" class="org.springframework.web.client.RestTemplate"/>

    <!-- Velocity Email Template Config Bean -->
    <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="resourceLoaderPath" value="/WEB-INF/email-templates/"/>
    </bean>

    <!--Do not forget activate @Transactional JPA annotation with <annotation-driven/>-->
    <!-- JPA Persistence Context and EntityManager configuration -->
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" >
        <property name="packagesToScan">
            <array>
                <value>ru.javastudy.mvc.core.bean</value>
                <value>ru.javastudy.mvc.core.rest.model</value>
            </array>
        </property>
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" >
                <property name="generateDdl" value="true" />
                <property name="showSql" value="true" />
            </bean>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>

    <!-- Automatic Transaction Participation-->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <!-- Quartz simple trigger -->
    <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <property name="jobDetail" ref="simpleQuartzJob" />
        <property name="repeatInterval" value="3000" />
        <property name="startDelay" value="1000" />
    </bean>
    <!-- Quartz cron trigger -->
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="quartzCronJob"/>
        <property name="cronExpression" value="0/7 * * * * ?" />
        <!-- every 30 seconds (seconds, minutes, hours, day of month, month, day of week, year(optional)) -->
    </bean>

    <!-- Quartz job -->
    <bean id="simpleQuartzJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="simpleQuartzTask" />
        <property name="targetMethod" value="simpleTaskMethod" />
    </bean>
    <!-- Quartz cron job -->
    <bean id="quartzCronJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="cronQuartzTask" />
        <property name="targetMethod" value="cronTaskMethod" />
    </bean>

    <!-- Quartz simple task -->
    <bean id="simpleQuartzTask" class="ru.javastudy.mvc.core.scheduling.QuartzTask" />

    <!-- Quartz cron task -->
    <bean id="cronQuartzTask" class="ru.javastudy.mvc.core.scheduling.CronQuartzTask" />

    <!-- Quartz Scheduler -->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="jobDetails">
            <list>
                <ref bean="simpleQuartzJob" />
                <ref bean="quartzCronJob" />
            </list>
        </property>
        <property name="triggers">
            <list>
                <ref bean="simpleTrigger" />
                <ref bean="cronTrigger" />
            </list>
        </property>
    </bean>
</beans>